volumes:
  db_storage:
  n8n_storage:
  n8n_nodes:
  langfuse_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_redis_data:
  langfuse_minio_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

services:
  postgres:
    container_name: n8n-postgres
    image: pgvector/pgvector:pg16
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - LANGFUSE_DB_USER=${LANGFUSE_DB_USER}
      - LANGFUSE_DB_PASSWORD=${LANGFUSE_DB_PASSWORD}
      - LANGFUSE_DB_NAME=${LANGFUSE_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    container_name: n8n-app
    image: docker.n8n.io/n8nio/n8n:latest
    restart: always
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_HOST=${N8N_HOST}
      # 1 Hop for Caddy Proxy, 1 for Cloudflare
      - N8N_PROXY_HOPS=2
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=true
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      # Uncomment the following if you'll be using Prometheus and Grafana for monitoring
      # Also uncomment the actual services below
      # - N8N_METRICS=true
      # - N8N_METRICS_INCLUDE_DEFAULT_METRICS=true
      # - N8N_METRICS_INCLUDE_CACHE_METRICS=true
      # - N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS=true
      # - N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL=true
      # - N8N_METRICS_INCLUDE_NODE_TYPE_LABEL=true
      # - N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL=true
      # - N8N_METRICS_INCLUDE_API_ENDPOINTS=true
      # - N8N_METRICS_INCLUDE_API_PATH_LABEL=true
      # - N8N_METRICS_INCLUDE_API_METHOD_LABEL=true
      # - N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL=true
      # - N8N_METRICS_INCLUDE_QUEUE_METRICS=true
      # - N8N_METRICS_QUEUE_METRICS_INTERVAL=20
    dns:
      # This is probably not needed unless you're using a custom DNS server
      - ${DNS_SERVER}
    ports:
      - "${N8N_PORT}:5678"
    volumes:
      - n8n_nodes:/home/node/.n8n/nodes
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "dockpeek.link=https://n8n.leoric.org"

  # n8n-mcp (AI assistant for workflow development)
  n8n-mcp:
    container_name: n8n-mcp
    image: ghcr.io/czlonkowski/n8n-mcp:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - N8N_MODE=true
      - MCP_MODE=http
      - N8N_API_URL=http://n8n:5678
      - N8N_API_KEY=${N8N_API_KEY:-}
      - AUTH_TOKEN=${MCP_AUTH_TOKEN}
    ports:
      - "${MCP_PORT}:3000"
    depends_on:
      n8n:
        condition: service_started

  # Start Langfuse Stack
  # Langfuse Web Server - Main UI, API, and SDK endpoints for LLM observability
  langfuse:
    container_name: langfuse-app
    image: docker.io/langfuse/langfuse:3
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${LANGFUSE_DB_USER}:${LANGFUSE_DB_PASSWORD}@postgres:5432/${LANGFUSE_DB_NAME}
      - NEXTAUTH_SECRET=${LANGFUSE_NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${LANGFUSE_URL}
      - SALT=${LANGFUSE_SALT}
      - ENCRYPTION_KEY=${LANGFUSE_ENCRYPTION_KEY}
      - NODE_ENV=production
      - HOSTNAME=0.0.0.0
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=false
      - LANGFUSE_ENABLE_BLOB_STORAGE_FILE_LOG=${LANGFUSE_ENABLE_BLOB_STORAGE_FILE_LOG:-true}
      - AUTH_DISABLE_SIGNUP=${LANGFUSE_AUTH_DISABLE_SIGNUP:-false}
      - TELEMETRY_ENABLED=false
      - LANGFUSE_S3_EVENT_UPLOAD_BUCKET=langfuse
      - LANGFUSE_S3_EVENT_UPLOAD_PREFIX=events
      - EMAIL_FROM_ADDRESS=
      - SMTP_CONNECTION_URL=
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_USER=${LANGFUSE_CLICKHOUSE_USER:-default}
      - CLICKHOUSE_PASSWORD=${LANGFUSE_CLICKHOUSE_PASSWORD:-}
      - CLICKHOUSE_MIGRATION_URL=clickhouse://clickhouse:9000
      - CLICKHOUSE_CLUSTER_ENABLED=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_AUTH=${LANGFUSE_REDIS_PASSWORD}
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY_ID=${LANGFUSE_S3_ACCESS_KEY}
      - S3_SECRET_ACCESS_KEY=${LANGFUSE_S3_SECRET_KEY}
      - S3_BUCKET_NAME=langfuse
      - S3_REGION=us-east-1
      - S3_FORCE_PATH_STYLE=true
      # Langfuse S3 Event Upload Configuration (MinIO)
      - AWS_REGION=us-east-1
      - LANGFUSE_S3_EVENT_UPLOAD_BUCKET=langfuse
      - LANGFUSE_S3_EVENT_UPLOAD_REGION=us-east-1
      - LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID=${LANGFUSE_S3_ACCESS_KEY}
      - LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY=${LANGFUSE_S3_SECRET_KEY}
      - LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT=http://minio:9000
      - LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE=true
      - LANGFUSE_S3_EVENT_UPLOAD_PREFIX=events/
      - NEXT_PUBLIC_API_URL=${LANGFUSE_URL}
      - NEXT_RUNTIME=nodejs
    ports:
      - "${LANGFUSE_PORT}:3000"
    volumes:
      - langfuse_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://0.0.0.0:3000/api/public/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "dockpeek.link=https://langfuse.lan"

  # Langfuse Async Worker - Background processing for events, traces, and async operations
  langfuse-worker:
    container_name: langfuse-worker
    image: docker.io/langfuse/langfuse-worker:3
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${LANGFUSE_DB_USER}:${LANGFUSE_DB_PASSWORD}@postgres:5432/${LANGFUSE_DB_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_AUTH=${LANGFUSE_REDIS_PASSWORD}
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_USER=${LANGFUSE_CLICKHOUSE_USER:-default}
      - CLICKHOUSE_PASSWORD=${LANGFUSE_CLICKHOUSE_PASSWORD:-}
      - CLICKHOUSE_CLUSTER_ENABLED=false
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY_ID=${LANGFUSE_S3_ACCESS_KEY}
      - S3_SECRET_ACCESS_KEY=${LANGFUSE_S3_SECRET_KEY}
      - S3_BUCKET_NAME=langfuse
      - S3_REGION=us-east-1
      - S3_FORCE_PATH_STYLE=true
      # Langfuse S3 Event Upload Configuration (MinIO)
      - LANGFUSE_S3_EVENT_UPLOAD_BUCKET=langfuse
      - LANGFUSE_S3_EVENT_UPLOAD_REGION=us-east-1
      - LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID=${LANGFUSE_S3_ACCESS_KEY}
      - LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY=${LANGFUSE_S3_SECRET_KEY}
      - LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT=http://minio:9000
      - LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE=true
      - LANGFUSE_S3_EVENT_UPLOAD_PREFIX=events/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy

  # Redis - Cache and Queue for Langfuse (sessions, background jobs, real-time features)
  redis:
    container_name: langfuse-redis
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      --requirepass ${LANGFUSE_REDIS_PASSWORD:-myredissecret}
      --maxmemory-policy noeviction
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${LANGFUSE_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - langfuse_redis_data:/data

  # ClickHouse - OLAP Database for observability data (traces, observations, scores for analytics)
  clickhouse:
    container_name: langfuse-clickhouse
    image: clickhouse/clickhouse-server:24.7
    restart: unless-stopped
    environment:
      - CLICKHOUSE_DB=langfuse
      - CLICKHOUSE_USER=${LANGFUSE_CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${LANGFUSE_CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO - S3/Blob Storage for raw events, multi-modal attachments, and large objects
  minio:
    container_name: langfuse-minio
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${LANGFUSE_S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${LANGFUSE_S3_SECRET_KEY}
    volumes:
      - langfuse_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - "dockpeek.link=https://minio.lan"

  # End Langfuse

  # Optional: pgAdmin - Web-based PostgreSQL administration tool
  pgadmin:
    container_name: n8n-pgadmin
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "dockpeek.link=https://pgadmin.lan"

  # Optional: PostgreSQL MCP Server - Database query and management via MCP protocol
  postgres-mcp:
    container_name: postgres-mcp
    image: crystaldba/postgres-mcp:latest
    restart: unless-stopped
    environment:
      - DATABASE_URI=postgresql://${POSTGRES_NON_ROOT_USER}:${POSTGRES_NON_ROOT_PASSWORD}@postgres:5432/${POSTGRES_MCP_DB}
    ports:
      - "${POSTGRES_MCP_PORT}:8000"
    command: ["--access-mode=unrestricted", "--transport=sse"]
    depends_on:
      postgres:
        condition: service_healthy

  # Optional: Prometheus and Grafana for monitoring
  # (not tested in a long time, contributions welcome)
  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "${PROMETHEUS_PORT}:9090"

  # grafana:
  #   image: grafana/grafana:latest
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   ports:
  #     - "${GRAFANA_PORT}:3000"
